# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui3.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage
from PyQt5.QtGui import QPixmap
import cv2, imutils
import numpy as np
import os
import face_recognition
from datetime import datetime


class Ui_SecondWindow(object):
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(1127, 707)
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")

                #Label fro presenting image
                self.label = QtWidgets.QLabel(self.centralwidget)
                self.label.setGeometry(QtCore.QRect(30, 80, 621, 481))
                self.label.setStyleSheet("border: 2px solid black;\n"
                "border-radius: 10px;\n"
                "")
                self.label.setText("")
                self.label.setObjectName("label")
                self.label_2 = QtWidgets.QLabel(self.centralwidget)
                self.label_2.setGeometry(QtCore.QRect(280, 30, 121, 41))
                self.label_2.setStyleSheet("font: 24pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 15px;")
                self.label_2.setObjectName("label_2")

                #Off Camera Button Segmen (pushButton)
                self.pushButton = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton.setGeometry(QtCore.QRect(350, 580, 161, 41))
                self.pushButton.setStyleSheet("font: 18pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 7px;\n"
                "background-color: grey;")
                self.pushButton.setObjectName("pushButton")
                self.pushButton.clicked.connect(self.cameraOffClickButton)

                #On Camera Button Segment (pushButton)
                self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton_2.setGeometry(QtCore.QRect(140, 580, 161, 41))
                self.pushButton_2.setStyleSheet("font: 18pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 7px;\n"
                "background-color: grey;")
                self.pushButton_2.setObjectName("pushButton_2")
                self.pushButton_2.clicked.connect(self.cameraOnClickButton)

                #Input New Name Segment
                self.inputNewName = QtWidgets.QLineEdit(self.centralwidget)
                self.inputNewName.setGeometry(QtCore.QRect(890, 230, 181, 41))
                self.inputNewName.setStyleSheet("font: 24pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 15px;")
                self.inputNewName.setObjectName("inputNewName")

                #Input new NPM Segment
                self.inputNewNpm = QtWidgets.QLineEdit(self.centralwidget)
                self.inputNewNpm.setGeometry(QtCore.QRect(890, 300, 181, 41))
                self.inputNewNpm.setStyleSheet("font: 24pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 15px;")
                self.inputNewNpm.setObjectName("inputNewNpm")
                self.label_3 = QtWidgets.QLabel(self.centralwidget)
                self.label_3.setGeometry(QtCore.QRect(740, 230, 131, 41))
                self.label_3.setStyleSheet("font: 20pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 10px;")
                self.label_3.setObjectName("label_3")
                self.label_4 = QtWidgets.QLabel(self.centralwidget)
                self.label_4.setGeometry(QtCore.QRect(750, 300, 111, 41))
                self.label_4.setStyleSheet("font: 20pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 10px;")
                self.label_4.setObjectName("label_4")

                #Add new Student Button
                self.addButton = QtWidgets.QPushButton(self.centralwidget)
                self.addButton.setGeometry(QtCore.QRect(850, 380, 91, 31))
                self.addButton.setStyleSheet("font: 18pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 7px;\n"
                "background-color: grey;")
                self.addButton.setObjectName("addButton")

                self.label_5 = QtWidgets.QLabel(self.centralwidget)
                self.label_5.setGeometry(QtCore.QRect(810, 160, 171, 41))
                self.label_5.setStyleSheet("font: 24pt \"Arial\";")
                self.label_5.setObjectName("label_5")
                MainWindow.setCentralWidget(self.centralwidget)
                self.menubar = QtWidgets.QMenuBar(MainWindow)
                self.menubar.setGeometry(QtCore.QRect(0, 0, 1127, 26))
                self.menubar.setObjectName("menubar")
                MainWindow.setMenuBar(self.menubar)
                self.statusbar = QtWidgets.QStatusBar(MainWindow)
                self.statusbar.setObjectName("statusbar")
                MainWindow.setStatusBar(self.statusbar)

                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

                self.path = 'fotowajah'
                self.images = []
                self.classNames = []
                self.myList = os.listdir(self.path)

                for cl in self.myList:
                        curImg = cv2.imread(f'{self.path}/{cl}')
                        self.images.append(curImg)
                        self.classNames.append(os.path.splitext(cl)[0])
                
                self.cameraOn = False

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.label_2.setText(_translate("MainWindow", "VIEW"))
                self.pushButton.setText(_translate("MainWindow", "Off Camera"))
                self.pushButton_2.setText(_translate("MainWindow", "On Camera"))
                self.label_3.setText(_translate("MainWindow", "NAMA :"))
                self.label_4.setText(_translate("MainWindow", "NPM :"))
                self.addButton.setText(_translate("MainWindow", "Add"))
                self.label_5.setText(_translate("MainWindow", "Add Data"))

        def retake(self):
                #buat camera
                cam = cv2.VideoCapture(0)
                counter = 0
                wajahDir = 'fotowajah'
                while True:
                        ret, frame = cam.read()
                        self.image = frame 
                        cv2.imshow("test",frame)
                        k=cv2.waitKey(1)
                        if k%256 == 27:
                                print("esc kluar")
                                break
                        elif k%256==32 :
                                #buat screnshoot sama masukin ke folder
                                name=input("Masukkan nama : ")
                                print(name)
                                NPM=input("Masukkan NPM : ")
                                print(NPM)
                                img_name = name + "_" + NPM + ".png"
                                cv2.imwrite(wajahDir + '/' +img_name, frame)
                                #buat input ke csv (gagal)
                                # csv1 = open("coba.csv", 'w', newline='')
                                # tulis = csv.writer(csv1)
                                #tup1= {name, NPM}
                                #tulis.writerow('\n'+tup1)
                                break

                cam.release()
                cam.destroyAllWindows
        
        def cameraOnClickButton(self):
                self.cameraOn = True
                self.recognition()
        
        def cameraOffClickButton(self):
                self.cameraOn = False
                self.pixmap = QPixmap('avatar/Griffins.png')
                self.label.setPixmap(self.pixmap)
        
        def setPhoto(self, image):
                image = imutils.resize(image,width=640)
                frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
                self.label.setPixmap(QtGui.QPixmap.fromImage(image))
        
        def findEncodings(self, images):
                encodeList = []

                for img in images:
                        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                        encode = face_recognition.face_encodings(img)[0]
                        encodeList.append(encode)
                return encodeList

        def recognition(self):
                encodeListKnown = self.findEncodings(self.images)
                print('Encoding Complete')

                cam = cv2.VideoCapture(0)

                while True and self.cameraOn:
                        frame, img = cam.read()
                # img = captureScreen()
                        imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
                        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

                        facesCurFrame = face_recognition.face_locations(imgS)
                        encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)

                        for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
                                matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
                                faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
                        # print(faceDis)
                                matchIndex = np.argmin(faceDis)

                                if matches[matchIndex]:
                                        name = self.classNames[matchIndex].upper()
                        # print(name)
                                        y1, x2, y2, x1 = faceLoc
                                        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                                        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                        cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
                                        cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 255, 255), 2)
                                else:
                                        y1, x2, y2, x1 = faceLoc
                                        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                                        imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
                                        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

                                        facesCurFrame = face_recognition.face_locations(imgS)
                                        encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)                
                                        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                        cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
                                        cv2.putText(img, "Unrecognize", (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 255, 255), 2)
                                        # Tambah Window Dialog Di Bawah                
                                        #retake()
                                #markAttendance(name)

                        self.setPhoto(img)
                        #cv2.imshow('Webcam', img)
                        k=cv2.waitKey(1)
                        if k%256 == 27:
                                print("esc kluar")
                                cam.release()
                                cam.destroyAllWindows
                                break
