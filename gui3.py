# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui3.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage
from PyQt5.QtGui import QPixmap
import cv2, imutils
import numpy as np
import os
import face_recognition
from datetime import datetime
from add_dialog import Ui_Dialog_Daftar
from datetime import datetime


class Ui_SecondWindow(object):
        def setupUi(self, MainWindow):
                self.windowMain = MainWindow
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(1127, 707)
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")

                #Label fro presenting image
                self.label = QtWidgets.QLabel(self.centralwidget)
                self.label.setGeometry(QtCore.QRect(30, 80, 621, 481))
                self.label.setStyleSheet("border: 2px solid black;\n"
                "border-radius: 10px;\n"
                "")
                self.label.setText("")
                self.label.setObjectName("label")
                self.label_2 = QtWidgets.QLabel(self.centralwidget)
                self.label_2.setGeometry(QtCore.QRect(280, 30, 121, 41))
                self.label_2.setStyleSheet("font: 24pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 15px;")
                self.label_2.setObjectName("label_2")

                #Off Camera Button Segmen (pushButton)
                self.pushButton = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton.setGeometry(QtCore.QRect(350, 580, 161, 41))
                self.pushButton.setStyleSheet("font: 18pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 7px;\n"
                "background-color: grey;")
                self.pushButton.setObjectName("pushButton")
                self.pushButton.clicked.connect(self.cameraOffClickButton)

                #On Camera Button Segment (pushButton)
                self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton_2.setGeometry(QtCore.QRect(140, 580, 161, 41))
                self.pushButton_2.setStyleSheet("font: 18pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 7px;\n"
                "background-color: grey;")
                self.pushButton_2.setObjectName("pushButton_2")
                self.pushButton_2.clicked.connect(self.cameraOnClickButton)
                self.pushButton_2.setObjectName("pushButton_2")

                #Reset Button
                self.resetButton = QtWidgets.QPushButton(self.centralwidget)
                self.resetButton.setGeometry(QtCore.QRect(840, 610, 93, 28))
                self.resetButton.setObjectName("resetButton")
                self.resetButton.clicked.connect(self.resetButtonOnClickListener)

                #Input New Name Segment
                self.outputName = QtWidgets.QLineEdit(self.centralwidget)
                self.outputName.setGeometry(QtCore.QRect(890, 330, 221, 41))
                self.outputName.setStyleSheet("font: 24pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 15px;")
                self.outputName.setObjectName("outputName")

                #Input new NPM Segment
                self.outputNpm = QtWidgets.QLineEdit(self.centralwidget)
                self.outputNpm.setGeometry(QtCore.QRect(890, 400, 221, 41))
                self.outputNpm.setStyleSheet("font: 24pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 15px;")
                self.outputNpm.setObjectName("outputNpm")

                self.label_3 = QtWidgets.QLabel(self.centralwidget)
                self.label_3.setGeometry(QtCore.QRect(700, 330, 181, 41))
                self.label_3.setStyleSheet("font: 20pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 10px;")
                self.label_3.setObjectName("label_3")

                self.label_4 = QtWidgets.QLabel(self.centralwidget)
                self.label_4.setGeometry(QtCore.QRect(700, 400, 181, 41))
                self.label_4.setStyleSheet("font: 20pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 10px;")
                self.label_4.setObjectName("label_4")

                self.label_5 = QtWidgets.QLabel(self.centralwidget)
                self.label_5.setGeometry(QtCore.QRect(770, 260, 251, 41))
                self.label_5.setStyleSheet("font: 24pt \"Arial\";")
                self.label_5.setObjectName("label_5")

                self.label_6 = QtWidgets.QLabel(self.centralwidget)
                self.label_6.setGeometry(QtCore.QRect(700, 520, 181, 41))
                self.label_6.setStyleSheet("font: 20pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 10px;")
                self.label_6.setObjectName("label_6")

                self.outputAbsensi = QtWidgets.QLineEdit(self.centralwidget)
                self.outputAbsensi.setGeometry(QtCore.QRect(890, 520, 221, 41))
                self.outputAbsensi.setStyleSheet("font: 24pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 15px;")
                self.outputAbsensi.setObjectName("outputAbsensi")

                self.label_7 = QtWidgets.QLabel(self.centralwidget)
                self.label_7.setGeometry(QtCore.QRect(700, 460, 181, 41))
                self.label_7.setStyleSheet("font: 20pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 10px;")
                self.label_7.setObjectName("label_7")

                self.outputTime = QtWidgets.QLineEdit(self.centralwidget)
                self.outputTime.setGeometry(QtCore.QRect(890, 460, 221, 41))
                self.outputTime.setStyleSheet("font: 24pt \"Arial\";\n"
                "border: 2px solid black;\n"
                "border-radius: 15px;")
                self.outputTime.setObjectName("outputTime")

                self.imageLabel = QtWidgets.QLabel(self.centralwidget)
                self.imageLabel.setGeometry(QtCore.QRect(770, 35, 55, 16))
                self.imageLabel.setText("")
                self.imageLabel.setObjectName("imageLabel")
                pixmap = QPixmap('avatar/ftui.png')
                self.imageLabel.setPixmap(pixmap)
                self.imageLabel.resize(pixmap.width(), pixmap.height())

                MainWindow.setCentralWidget(self.centralwidget)
                self.menubar = QtWidgets.QMenuBar(MainWindow)
                self.menubar.setGeometry(QtCore.QRect(0, 0, 1127, 26))
                self.menubar.setObjectName("menubar")
                MainWindow.setMenuBar(self.menubar)
                self.statusbar = QtWidgets.QStatusBar(MainWindow)
                self.statusbar.setObjectName("statusbar")
                MainWindow.setStatusBar(self.statusbar)

                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

                self.path = 'fotowajah'
                self.images = []
                self.classNames = []
                self.myList = os.listdir(self.path)

                for cl in self.myList:
                        curImg = cv2.imread(f'{self.path}/{cl}')
                        self.images.append(curImg)
                        self.classNames.append(os.path.splitext(cl)[0])
                
                self.cameraOn = False
                self.flag = False
                self.students = self.classNames.copy()
                self.f = open("coba.csv",'r+')

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.label_2.setText(_translate("MainWindow", "VIEW"))
                self.pushButton.setText(_translate("MainWindow", "Off Camera"))
                self.pushButton_2.setText(_translate("MainWindow", "On Camera"))
                self.label_3.setText(_translate("MainWindow", "NAMA :"))
                self.label_4.setText(_translate("MainWindow", "NPM :"))
                self.label_5.setText(_translate("MainWindow", "MAHASISWA"))
                self.label_6.setText(_translate("MainWindow", "ABSENSI :"))
                self.label_7.setText(_translate("MainWindow", "TIME :"))
                self.resetButton.setText(_translate("MainWindow", "Reset Absen"))
        
        def cameraOnClickButton(self):
                self.cameraOn = True
                self.recognition()
        
        def cameraOffClickButton(self):
                self.cameraOn = False
                self.pixmap = QPixmap('avatar/Griffins.png')
                self.label.setPixmap(self.pixmap)
                self.path = 'fotowajah'
                self.images = []
                self.classNames = []
                self.myList = os.listdir(self.path)

                for cl in self.myList:
                        curImg = cv2.imread(f'{self.path}/{cl}')
                        self.images.append(curImg)
                        self.classNames.append(os.path.splitext(cl)[0])
        
        def setPhoto(self, image):
                image = imutils.resize(image,width=640)
                frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
                self.label.setPixmap(QtGui.QPixmap.fromImage(image))
        
        def findEncodings(self, images):
                encodeList = []

                for img in images:
                        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                        encode = face_recognition.face_encodings(img)[0]
                        encodeList.append(encode)
                return encodeList
        
        def showDialogDaftar(self):
                self.dialogWindow = QtWidgets.QDialog()
                self.myDialog1 = Ui_Dialog_Daftar()
                self.myDialog1.setupUi(self.dialogWindow)
                self.dialogWindow.show()

        def resetButtonOnClickListener(self):
                self.cameraOffClickButton()
                self.outputName.setText("")
                self.outputNpm.setText("")
                self.outputAbsensi.setText("")
                self.outputTime.setText("")
                self.flag = False

        def recognition(self):
                encodeListKnown = self.findEncodings(self.images)
                print('Encoding Complete')

                cam = cv2.VideoCapture(0)

                i = 0

                while True and self.cameraOn:
                        frame, img = cam.read()
                # img = captureScreen()
                        imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
                        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

                        facesCurFrame = face_recognition.face_locations(imgS)
                        encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)

                        for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
                                matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
                                faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
                        # print(faceDis)
                                matchIndex = np.argmin(faceDis)

                                if matches[matchIndex]:
                                        name = self.classNames[matchIndex].upper()
                        # print(name)
                                        y1, x2, y2, x1 = faceLoc
                                        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                                        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                        cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
                                        cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 255, 255), 2)
                                        arrayData = name.split('_')
                                        self.outputName.setText(arrayData[0])
                                        self.outputNpm.setText(arrayData[1])
                                        self.outputAbsensi.setText("Absen Hadir")
                                        if(not self.flag):
                                                now = datetime.now()
                                                time = now.strftime("%H:%M:%S")
                                                self.outputTime.setText(time)
                                                self.flag = True
                                        if name in self.classNames:
                                                if name in self.student: # Ketika nama tidak ada di array student maka tidak bisa absen lagi
                                                        self.student.remove(name)
                                                        name, npm = name.split("_") # dapetin string nama dan NPM mahasiswa
                                                        now = datetime.now()
                                                        dtString = now.strftime('%H:%M:%S')
                                                        self.f.writelines(f'\n{name},{npm},{dtString}')
                                else:
                                        y1, x2, y2, x1 = faceLoc
                                        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                                        imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
                                        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

                                        facesCurFrame = face_recognition.face_locations(imgS)
                                        encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)                
                                        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)
                                        cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 0, 255), cv2.FILLED)
                                        cv2.putText(img, "Unrecognize", (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 255, 255), 2)
                                        # Tambah Window Dialog Di Bawah
                                        self.outputName.setText("Unknown")
                                        self.outputNpm.setText("Unknown")
                                        self.outputAbsensi.setText("Unknown")
                                        self.outputTime.setText("Unknown")
                                        if(i >= 10) :
                                                self.cameraOffClickButton()
                                                self.showDialogDaftar()
                                                self.myDialog1.windowMain = self.windowMain                
                                        #retake()
                                #markAttendance(name)

                        self.setPhoto(img)
                        i = i + 1
                        k=cv2.waitKey(1)
                        if k%256 == 27:
                                print("esc kluar")
                                cam.release()
                                cam.destroyAllWindows
                                break
